// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paxos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "paxos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace libpaxos {
class NextRoundDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NextRound> {
} _NextRound_default_instance_;
class LastVoteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LastVote> {
} _LastVote_default_instance_;
class BeginRoundDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BeginRound> {
} _BeginRound_default_instance_;
class VotedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Voted> {
} _Voted_default_instance_;
class OkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ok> {
} _Ok_default_instance_;
class ValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Value> {
} _Value_default_instance_;

namespace protobuf_paxos_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextRound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextRound, roundnumber_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastVote, roundnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastVote, lastvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastVote, lastround_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastVote, accepted_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginRound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginRound, roundnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginRound, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voted, roundnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voted, lastround_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voted, accepted_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ok, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ok, roundnumber_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, roundnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, value_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(NextRound)},
  { 5, -1, sizeof(LastVote)},
  { 13, -1, sizeof(BeginRound)},
  { 19, -1, sizeof(Voted)},
  { 26, -1, sizeof(Ok)},
  { 31, -1, sizeof(Value)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_NextRound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LastVote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BeginRound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Voted_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ok_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Value_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "paxos.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _NextRound_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LastVote_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _BeginRound_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Voted_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Ok_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Value_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _NextRound_default_instance_.DefaultConstruct();
  _LastVote_default_instance_.DefaultConstruct();
  _BeginRound_default_instance_.DefaultConstruct();
  _Voted_default_instance_.DefaultConstruct();
  _Ok_default_instance_.DefaultConstruct();
  _Value_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013paxos.proto\022\010libpaxos\" \n\tNextRound\022\023\n\013"
      "roundNumber\030\001 \001(\004\"W\n\010LastVote\022\023\n\013roundNu"
      "mber\030\001 \001(\004\022\021\n\tlastValue\030\002 \001(\004\022\021\n\tlastRou"
      "nd\030\003 \001(\004\022\020\n\010accepted\030\004 \001(\010\"0\n\nBeginRound"
      "\022\023\n\013roundNumber\030\001 \001(\004\022\r\n\005value\030\002 \001(\004\"A\n\005"
      "Voted\022\023\n\013roundNumber\030\001 \001(\004\022\021\n\tlastRound\030"
      "\002 \001(\004\022\020\n\010accepted\030\003 \001(\010\"\031\n\002Ok\022\023\n\013roundNu"
      "mber\030\001 \001(\004\"+\n\005Value\022\023\n\013roundNumber\030\001 \001(\004"
      "\022\r\n\005value\030\002 \001(\0042\247\001\n\010Acceptor\0228\n\013getLastV"
      "ote\022\023.libpaxos.NextRound\032\022.libpaxos.Last"
      "Vote\"\000\0225\n\nbeginRound\022\024.libpaxos.BeginRou"
      "nd\032\017.libpaxos.Voted\"\000\022*\n\007success\022\017.libpa"
      "xos.Value\032\014.libpaxos.Ok\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 513);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "paxos.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_paxos_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NextRound::kRoundNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NextRound::NextRound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paxos_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libpaxos.NextRound)
}
NextRound::NextRound(const NextRound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roundnumber_ = from.roundnumber_;
  // @@protoc_insertion_point(copy_constructor:libpaxos.NextRound)
}

void NextRound::SharedCtor() {
  roundnumber_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

NextRound::~NextRound() {
  // @@protoc_insertion_point(destructor:libpaxos.NextRound)
  SharedDtor();
}

void NextRound::SharedDtor() {
}

void NextRound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NextRound::descriptor() {
  protobuf_paxos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paxos_2eproto::file_level_metadata[0].descriptor;
}

const NextRound& NextRound::default_instance() {
  protobuf_paxos_2eproto::InitDefaults();
  return *internal_default_instance();
}

NextRound* NextRound::New(::google::protobuf::Arena* arena) const {
  NextRound* n = new NextRound;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NextRound::Clear() {
// @@protoc_insertion_point(message_clear_start:libpaxos.NextRound)
  roundnumber_ = GOOGLE_ULONGLONG(0);
}

bool NextRound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libpaxos.NextRound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 roundNumber = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roundnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libpaxos.NextRound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libpaxos.NextRound)
  return false;
#undef DO_
}

void NextRound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libpaxos.NextRound)
  // uint64 roundNumber = 1;
  if (this->roundnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roundnumber(), output);
  }

  // @@protoc_insertion_point(serialize_end:libpaxos.NextRound)
}

::google::protobuf::uint8* NextRound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libpaxos.NextRound)
  // uint64 roundNumber = 1;
  if (this->roundnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roundnumber(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:libpaxos.NextRound)
  return target;
}

size_t NextRound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libpaxos.NextRound)
  size_t total_size = 0;

  // uint64 roundNumber = 1;
  if (this->roundnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roundnumber());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NextRound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libpaxos.NextRound)
  GOOGLE_DCHECK_NE(&from, this);
  const NextRound* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NextRound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libpaxos.NextRound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libpaxos.NextRound)
    MergeFrom(*source);
  }
}

void NextRound::MergeFrom(const NextRound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libpaxos.NextRound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.roundnumber() != 0) {
    set_roundnumber(from.roundnumber());
  }
}

void NextRound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libpaxos.NextRound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NextRound::CopyFrom(const NextRound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libpaxos.NextRound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextRound::IsInitialized() const {
  return true;
}

void NextRound::Swap(NextRound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NextRound::InternalSwap(NextRound* other) {
  std::swap(roundnumber_, other->roundnumber_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NextRound::GetMetadata() const {
  protobuf_paxos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paxos_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NextRound

// uint64 roundNumber = 1;
void NextRound::clear_roundnumber() {
  roundnumber_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NextRound::roundnumber() const {
  // @@protoc_insertion_point(field_get:libpaxos.NextRound.roundNumber)
  return roundnumber_;
}
void NextRound::set_roundnumber(::google::protobuf::uint64 value) {
  
  roundnumber_ = value;
  // @@protoc_insertion_point(field_set:libpaxos.NextRound.roundNumber)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LastVote::kRoundNumberFieldNumber;
const int LastVote::kLastValueFieldNumber;
const int LastVote::kLastRoundFieldNumber;
const int LastVote::kAcceptedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LastVote::LastVote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paxos_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libpaxos.LastVote)
}
LastVote::LastVote(const LastVote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roundnumber_, &from.roundnumber_,
    reinterpret_cast<char*>(&accepted_) -
    reinterpret_cast<char*>(&roundnumber_) + sizeof(accepted_));
  // @@protoc_insertion_point(copy_constructor:libpaxos.LastVote)
}

void LastVote::SharedCtor() {
  ::memset(&roundnumber_, 0, reinterpret_cast<char*>(&accepted_) -
    reinterpret_cast<char*>(&roundnumber_) + sizeof(accepted_));
  _cached_size_ = 0;
}

LastVote::~LastVote() {
  // @@protoc_insertion_point(destructor:libpaxos.LastVote)
  SharedDtor();
}

void LastVote::SharedDtor() {
}

void LastVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LastVote::descriptor() {
  protobuf_paxos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paxos_2eproto::file_level_metadata[1].descriptor;
}

const LastVote& LastVote::default_instance() {
  protobuf_paxos_2eproto::InitDefaults();
  return *internal_default_instance();
}

LastVote* LastVote::New(::google::protobuf::Arena* arena) const {
  LastVote* n = new LastVote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LastVote::Clear() {
// @@protoc_insertion_point(message_clear_start:libpaxos.LastVote)
  ::memset(&roundnumber_, 0, reinterpret_cast<char*>(&accepted_) -
    reinterpret_cast<char*>(&roundnumber_) + sizeof(accepted_));
}

bool LastVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libpaxos.LastVote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 roundNumber = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roundnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lastValue = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lastRound = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastround_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool accepted = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accepted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libpaxos.LastVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libpaxos.LastVote)
  return false;
#undef DO_
}

void LastVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libpaxos.LastVote)
  // uint64 roundNumber = 1;
  if (this->roundnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roundnumber(), output);
  }

  // uint64 lastValue = 2;
  if (this->lastvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lastvalue(), output);
  }

  // uint64 lastRound = 3;
  if (this->lastround() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lastround(), output);
  }

  // bool accepted = 4;
  if (this->accepted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->accepted(), output);
  }

  // @@protoc_insertion_point(serialize_end:libpaxos.LastVote)
}

::google::protobuf::uint8* LastVote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libpaxos.LastVote)
  // uint64 roundNumber = 1;
  if (this->roundnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roundnumber(), target);
  }

  // uint64 lastValue = 2;
  if (this->lastvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lastvalue(), target);
  }

  // uint64 lastRound = 3;
  if (this->lastround() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lastround(), target);
  }

  // bool accepted = 4;
  if (this->accepted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->accepted(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:libpaxos.LastVote)
  return target;
}

size_t LastVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libpaxos.LastVote)
  size_t total_size = 0;

  // uint64 roundNumber = 1;
  if (this->roundnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roundnumber());
  }

  // uint64 lastValue = 2;
  if (this->lastvalue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lastvalue());
  }

  // uint64 lastRound = 3;
  if (this->lastround() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lastround());
  }

  // bool accepted = 4;
  if (this->accepted() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LastVote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libpaxos.LastVote)
  GOOGLE_DCHECK_NE(&from, this);
  const LastVote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LastVote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libpaxos.LastVote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libpaxos.LastVote)
    MergeFrom(*source);
  }
}

void LastVote::MergeFrom(const LastVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libpaxos.LastVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.roundnumber() != 0) {
    set_roundnumber(from.roundnumber());
  }
  if (from.lastvalue() != 0) {
    set_lastvalue(from.lastvalue());
  }
  if (from.lastround() != 0) {
    set_lastround(from.lastround());
  }
  if (from.accepted() != 0) {
    set_accepted(from.accepted());
  }
}

void LastVote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libpaxos.LastVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastVote::CopyFrom(const LastVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libpaxos.LastVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastVote::IsInitialized() const {
  return true;
}

void LastVote::Swap(LastVote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LastVote::InternalSwap(LastVote* other) {
  std::swap(roundnumber_, other->roundnumber_);
  std::swap(lastvalue_, other->lastvalue_);
  std::swap(lastround_, other->lastround_);
  std::swap(accepted_, other->accepted_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LastVote::GetMetadata() const {
  protobuf_paxos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paxos_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LastVote

// uint64 roundNumber = 1;
void LastVote::clear_roundnumber() {
  roundnumber_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LastVote::roundnumber() const {
  // @@protoc_insertion_point(field_get:libpaxos.LastVote.roundNumber)
  return roundnumber_;
}
void LastVote::set_roundnumber(::google::protobuf::uint64 value) {
  
  roundnumber_ = value;
  // @@protoc_insertion_point(field_set:libpaxos.LastVote.roundNumber)
}

// uint64 lastValue = 2;
void LastVote::clear_lastvalue() {
  lastvalue_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LastVote::lastvalue() const {
  // @@protoc_insertion_point(field_get:libpaxos.LastVote.lastValue)
  return lastvalue_;
}
void LastVote::set_lastvalue(::google::protobuf::uint64 value) {
  
  lastvalue_ = value;
  // @@protoc_insertion_point(field_set:libpaxos.LastVote.lastValue)
}

// uint64 lastRound = 3;
void LastVote::clear_lastround() {
  lastround_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LastVote::lastround() const {
  // @@protoc_insertion_point(field_get:libpaxos.LastVote.lastRound)
  return lastround_;
}
void LastVote::set_lastround(::google::protobuf::uint64 value) {
  
  lastround_ = value;
  // @@protoc_insertion_point(field_set:libpaxos.LastVote.lastRound)
}

// bool accepted = 4;
void LastVote::clear_accepted() {
  accepted_ = false;
}
bool LastVote::accepted() const {
  // @@protoc_insertion_point(field_get:libpaxos.LastVote.accepted)
  return accepted_;
}
void LastVote::set_accepted(bool value) {
  
  accepted_ = value;
  // @@protoc_insertion_point(field_set:libpaxos.LastVote.accepted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeginRound::kRoundNumberFieldNumber;
const int BeginRound::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeginRound::BeginRound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paxos_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libpaxos.BeginRound)
}
BeginRound::BeginRound(const BeginRound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roundnumber_, &from.roundnumber_,
    reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&roundnumber_) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:libpaxos.BeginRound)
}

void BeginRound::SharedCtor() {
  ::memset(&roundnumber_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&roundnumber_) + sizeof(value_));
  _cached_size_ = 0;
}

BeginRound::~BeginRound() {
  // @@protoc_insertion_point(destructor:libpaxos.BeginRound)
  SharedDtor();
}

void BeginRound::SharedDtor() {
}

void BeginRound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginRound::descriptor() {
  protobuf_paxos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paxos_2eproto::file_level_metadata[2].descriptor;
}

const BeginRound& BeginRound::default_instance() {
  protobuf_paxos_2eproto::InitDefaults();
  return *internal_default_instance();
}

BeginRound* BeginRound::New(::google::protobuf::Arena* arena) const {
  BeginRound* n = new BeginRound;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeginRound::Clear() {
// @@protoc_insertion_point(message_clear_start:libpaxos.BeginRound)
  ::memset(&roundnumber_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&roundnumber_) + sizeof(value_));
}

bool BeginRound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libpaxos.BeginRound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 roundNumber = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roundnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 value = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libpaxos.BeginRound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libpaxos.BeginRound)
  return false;
#undef DO_
}

void BeginRound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libpaxos.BeginRound)
  // uint64 roundNumber = 1;
  if (this->roundnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roundnumber(), output);
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:libpaxos.BeginRound)
}

::google::protobuf::uint8* BeginRound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libpaxos.BeginRound)
  // uint64 roundNumber = 1;
  if (this->roundnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roundnumber(), target);
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:libpaxos.BeginRound)
  return target;
}

size_t BeginRound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libpaxos.BeginRound)
  size_t total_size = 0;

  // uint64 roundNumber = 1;
  if (this->roundnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roundnumber());
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginRound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libpaxos.BeginRound)
  GOOGLE_DCHECK_NE(&from, this);
  const BeginRound* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BeginRound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libpaxos.BeginRound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libpaxos.BeginRound)
    MergeFrom(*source);
  }
}

void BeginRound::MergeFrom(const BeginRound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libpaxos.BeginRound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.roundnumber() != 0) {
    set_roundnumber(from.roundnumber());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void BeginRound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libpaxos.BeginRound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginRound::CopyFrom(const BeginRound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libpaxos.BeginRound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginRound::IsInitialized() const {
  return true;
}

void BeginRound::Swap(BeginRound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeginRound::InternalSwap(BeginRound* other) {
  std::swap(roundnumber_, other->roundnumber_);
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeginRound::GetMetadata() const {
  protobuf_paxos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paxos_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BeginRound

// uint64 roundNumber = 1;
void BeginRound::clear_roundnumber() {
  roundnumber_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 BeginRound::roundnumber() const {
  // @@protoc_insertion_point(field_get:libpaxos.BeginRound.roundNumber)
  return roundnumber_;
}
void BeginRound::set_roundnumber(::google::protobuf::uint64 value) {
  
  roundnumber_ = value;
  // @@protoc_insertion_point(field_set:libpaxos.BeginRound.roundNumber)
}

// uint64 value = 2;
void BeginRound::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 BeginRound::value() const {
  // @@protoc_insertion_point(field_get:libpaxos.BeginRound.value)
  return value_;
}
void BeginRound::set_value(::google::protobuf::uint64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:libpaxos.BeginRound.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Voted::kRoundNumberFieldNumber;
const int Voted::kLastRoundFieldNumber;
const int Voted::kAcceptedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Voted::Voted()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paxos_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libpaxos.Voted)
}
Voted::Voted(const Voted& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roundnumber_, &from.roundnumber_,
    reinterpret_cast<char*>(&accepted_) -
    reinterpret_cast<char*>(&roundnumber_) + sizeof(accepted_));
  // @@protoc_insertion_point(copy_constructor:libpaxos.Voted)
}

void Voted::SharedCtor() {
  ::memset(&roundnumber_, 0, reinterpret_cast<char*>(&accepted_) -
    reinterpret_cast<char*>(&roundnumber_) + sizeof(accepted_));
  _cached_size_ = 0;
}

Voted::~Voted() {
  // @@protoc_insertion_point(destructor:libpaxos.Voted)
  SharedDtor();
}

void Voted::SharedDtor() {
}

void Voted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Voted::descriptor() {
  protobuf_paxos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paxos_2eproto::file_level_metadata[3].descriptor;
}

const Voted& Voted::default_instance() {
  protobuf_paxos_2eproto::InitDefaults();
  return *internal_default_instance();
}

Voted* Voted::New(::google::protobuf::Arena* arena) const {
  Voted* n = new Voted;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Voted::Clear() {
// @@protoc_insertion_point(message_clear_start:libpaxos.Voted)
  ::memset(&roundnumber_, 0, reinterpret_cast<char*>(&accepted_) -
    reinterpret_cast<char*>(&roundnumber_) + sizeof(accepted_));
}

bool Voted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libpaxos.Voted)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 roundNumber = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roundnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lastRound = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastround_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool accepted = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accepted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libpaxos.Voted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libpaxos.Voted)
  return false;
#undef DO_
}

void Voted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libpaxos.Voted)
  // uint64 roundNumber = 1;
  if (this->roundnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roundnumber(), output);
  }

  // uint64 lastRound = 2;
  if (this->lastround() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lastround(), output);
  }

  // bool accepted = 3;
  if (this->accepted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->accepted(), output);
  }

  // @@protoc_insertion_point(serialize_end:libpaxos.Voted)
}

::google::protobuf::uint8* Voted::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libpaxos.Voted)
  // uint64 roundNumber = 1;
  if (this->roundnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roundnumber(), target);
  }

  // uint64 lastRound = 2;
  if (this->lastround() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lastround(), target);
  }

  // bool accepted = 3;
  if (this->accepted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->accepted(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:libpaxos.Voted)
  return target;
}

size_t Voted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libpaxos.Voted)
  size_t total_size = 0;

  // uint64 roundNumber = 1;
  if (this->roundnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roundnumber());
  }

  // uint64 lastRound = 2;
  if (this->lastround() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lastround());
  }

  // bool accepted = 3;
  if (this->accepted() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Voted::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libpaxos.Voted)
  GOOGLE_DCHECK_NE(&from, this);
  const Voted* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Voted>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libpaxos.Voted)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libpaxos.Voted)
    MergeFrom(*source);
  }
}

void Voted::MergeFrom(const Voted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libpaxos.Voted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.roundnumber() != 0) {
    set_roundnumber(from.roundnumber());
  }
  if (from.lastround() != 0) {
    set_lastround(from.lastround());
  }
  if (from.accepted() != 0) {
    set_accepted(from.accepted());
  }
}

void Voted::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libpaxos.Voted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Voted::CopyFrom(const Voted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libpaxos.Voted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Voted::IsInitialized() const {
  return true;
}

void Voted::Swap(Voted* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Voted::InternalSwap(Voted* other) {
  std::swap(roundnumber_, other->roundnumber_);
  std::swap(lastround_, other->lastround_);
  std::swap(accepted_, other->accepted_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Voted::GetMetadata() const {
  protobuf_paxos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paxos_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Voted

// uint64 roundNumber = 1;
void Voted::clear_roundnumber() {
  roundnumber_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Voted::roundnumber() const {
  // @@protoc_insertion_point(field_get:libpaxos.Voted.roundNumber)
  return roundnumber_;
}
void Voted::set_roundnumber(::google::protobuf::uint64 value) {
  
  roundnumber_ = value;
  // @@protoc_insertion_point(field_set:libpaxos.Voted.roundNumber)
}

// uint64 lastRound = 2;
void Voted::clear_lastround() {
  lastround_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Voted::lastround() const {
  // @@protoc_insertion_point(field_get:libpaxos.Voted.lastRound)
  return lastround_;
}
void Voted::set_lastround(::google::protobuf::uint64 value) {
  
  lastround_ = value;
  // @@protoc_insertion_point(field_set:libpaxos.Voted.lastRound)
}

// bool accepted = 3;
void Voted::clear_accepted() {
  accepted_ = false;
}
bool Voted::accepted() const {
  // @@protoc_insertion_point(field_get:libpaxos.Voted.accepted)
  return accepted_;
}
void Voted::set_accepted(bool value) {
  
  accepted_ = value;
  // @@protoc_insertion_point(field_set:libpaxos.Voted.accepted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ok::kRoundNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ok::Ok()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paxos_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libpaxos.Ok)
}
Ok::Ok(const Ok& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roundnumber_ = from.roundnumber_;
  // @@protoc_insertion_point(copy_constructor:libpaxos.Ok)
}

void Ok::SharedCtor() {
  roundnumber_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Ok::~Ok() {
  // @@protoc_insertion_point(destructor:libpaxos.Ok)
  SharedDtor();
}

void Ok::SharedDtor() {
}

void Ok::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ok::descriptor() {
  protobuf_paxos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paxos_2eproto::file_level_metadata[4].descriptor;
}

const Ok& Ok::default_instance() {
  protobuf_paxos_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ok* Ok::New(::google::protobuf::Arena* arena) const {
  Ok* n = new Ok;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ok::Clear() {
// @@protoc_insertion_point(message_clear_start:libpaxos.Ok)
  roundnumber_ = GOOGLE_ULONGLONG(0);
}

bool Ok::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libpaxos.Ok)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 roundNumber = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roundnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libpaxos.Ok)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libpaxos.Ok)
  return false;
#undef DO_
}

void Ok::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libpaxos.Ok)
  // uint64 roundNumber = 1;
  if (this->roundnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roundnumber(), output);
  }

  // @@protoc_insertion_point(serialize_end:libpaxos.Ok)
}

::google::protobuf::uint8* Ok::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libpaxos.Ok)
  // uint64 roundNumber = 1;
  if (this->roundnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roundnumber(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:libpaxos.Ok)
  return target;
}

size_t Ok::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libpaxos.Ok)
  size_t total_size = 0;

  // uint64 roundNumber = 1;
  if (this->roundnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roundnumber());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ok::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libpaxos.Ok)
  GOOGLE_DCHECK_NE(&from, this);
  const Ok* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ok>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libpaxos.Ok)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libpaxos.Ok)
    MergeFrom(*source);
  }
}

void Ok::MergeFrom(const Ok& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libpaxos.Ok)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.roundnumber() != 0) {
    set_roundnumber(from.roundnumber());
  }
}

void Ok::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libpaxos.Ok)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ok::CopyFrom(const Ok& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libpaxos.Ok)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ok::IsInitialized() const {
  return true;
}

void Ok::Swap(Ok* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ok::InternalSwap(Ok* other) {
  std::swap(roundnumber_, other->roundnumber_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ok::GetMetadata() const {
  protobuf_paxos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paxos_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ok

// uint64 roundNumber = 1;
void Ok::clear_roundnumber() {
  roundnumber_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Ok::roundnumber() const {
  // @@protoc_insertion_point(field_get:libpaxos.Ok.roundNumber)
  return roundnumber_;
}
void Ok::set_roundnumber(::google::protobuf::uint64 value) {
  
  roundnumber_ = value;
  // @@protoc_insertion_point(field_set:libpaxos.Ok.roundNumber)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kRoundNumberFieldNumber;
const int Value::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paxos_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libpaxos.Value)
}
Value::Value(const Value& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roundnumber_, &from.roundnumber_,
    reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&roundnumber_) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:libpaxos.Value)
}

void Value::SharedCtor() {
  ::memset(&roundnumber_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&roundnumber_) + sizeof(value_));
  _cached_size_ = 0;
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:libpaxos.Value)
  SharedDtor();
}

void Value::SharedDtor() {
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  protobuf_paxos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paxos_2eproto::file_level_metadata[5].descriptor;
}

const Value& Value::default_instance() {
  protobuf_paxos_2eproto::InitDefaults();
  return *internal_default_instance();
}

Value* Value::New(::google::protobuf::Arena* arena) const {
  Value* n = new Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:libpaxos.Value)
  ::memset(&roundnumber_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&roundnumber_) + sizeof(value_));
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libpaxos.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 roundNumber = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roundnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 value = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libpaxos.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libpaxos.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libpaxos.Value)
  // uint64 roundNumber = 1;
  if (this->roundnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roundnumber(), output);
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:libpaxos.Value)
}

::google::protobuf::uint8* Value::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libpaxos.Value)
  // uint64 roundNumber = 1;
  if (this->roundnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roundnumber(), target);
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:libpaxos.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libpaxos.Value)
  size_t total_size = 0;

  // uint64 roundNumber = 1;
  if (this->roundnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roundnumber());
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libpaxos.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Value* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Value>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libpaxos.Value)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libpaxos.Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libpaxos.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.roundnumber() != 0) {
    set_roundnumber(from.roundnumber());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libpaxos.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libpaxos.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  std::swap(roundnumber_, other->roundnumber_);
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_paxos_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paxos_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Value

// uint64 roundNumber = 1;
void Value::clear_roundnumber() {
  roundnumber_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Value::roundnumber() const {
  // @@protoc_insertion_point(field_get:libpaxos.Value.roundNumber)
  return roundnumber_;
}
void Value::set_roundnumber(::google::protobuf::uint64 value) {
  
  roundnumber_ = value;
  // @@protoc_insertion_point(field_set:libpaxos.Value.roundNumber)
}

// uint64 value = 2;
void Value::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Value::value() const {
  // @@protoc_insertion_point(field_get:libpaxos.Value.value)
  return value_;
}
void Value::set_value(::google::protobuf::uint64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:libpaxos.Value.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace libpaxos

// @@protoc_insertion_point(global_scope)
