// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: paxos.proto
#ifndef GRPC_paxos_2eproto__INCLUDED
#define GRPC_paxos_2eproto__INCLUDED

#include "paxos.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace libpaxos {

class Acceptor final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getLastVote(::grpc::ClientContext* context, const ::libpaxos::NextRound& request, ::libpaxos::LastVote* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::libpaxos::LastVote>> AsyncgetLastVote(::grpc::ClientContext* context, const ::libpaxos::NextRound& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::libpaxos::LastVote>>(AsyncgetLastVoteRaw(context, request, cq));
    }
    virtual ::grpc::Status beginRound(::grpc::ClientContext* context, const ::libpaxos::BeginRound& request, ::libpaxos::Voted* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::libpaxos::Voted>> AsyncbeginRound(::grpc::ClientContext* context, const ::libpaxos::BeginRound& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::libpaxos::Voted>>(AsyncbeginRoundRaw(context, request, cq));
    }
    virtual ::grpc::Status success(::grpc::ClientContext* context, const ::libpaxos::Value& request, ::libpaxos::Ok* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::libpaxos::Ok>> Asyncsuccess(::grpc::ClientContext* context, const ::libpaxos::Value& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::libpaxos::Ok>>(AsyncsuccessRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::libpaxos::LastVote>* AsyncgetLastVoteRaw(::grpc::ClientContext* context, const ::libpaxos::NextRound& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::libpaxos::Voted>* AsyncbeginRoundRaw(::grpc::ClientContext* context, const ::libpaxos::BeginRound& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::libpaxos::Ok>* AsyncsuccessRaw(::grpc::ClientContext* context, const ::libpaxos::Value& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getLastVote(::grpc::ClientContext* context, const ::libpaxos::NextRound& request, ::libpaxos::LastVote* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::libpaxos::LastVote>> AsyncgetLastVote(::grpc::ClientContext* context, const ::libpaxos::NextRound& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::libpaxos::LastVote>>(AsyncgetLastVoteRaw(context, request, cq));
    }
    ::grpc::Status beginRound(::grpc::ClientContext* context, const ::libpaxos::BeginRound& request, ::libpaxos::Voted* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::libpaxos::Voted>> AsyncbeginRound(::grpc::ClientContext* context, const ::libpaxos::BeginRound& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::libpaxos::Voted>>(AsyncbeginRoundRaw(context, request, cq));
    }
    ::grpc::Status success(::grpc::ClientContext* context, const ::libpaxos::Value& request, ::libpaxos::Ok* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::libpaxos::Ok>> Asyncsuccess(::grpc::ClientContext* context, const ::libpaxos::Value& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::libpaxos::Ok>>(AsyncsuccessRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::libpaxos::LastVote>* AsyncgetLastVoteRaw(::grpc::ClientContext* context, const ::libpaxos::NextRound& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::libpaxos::Voted>* AsyncbeginRoundRaw(::grpc::ClientContext* context, const ::libpaxos::BeginRound& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::libpaxos::Ok>* AsyncsuccessRaw(::grpc::ClientContext* context, const ::libpaxos::Value& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_getLastVote_;
    const ::grpc::RpcMethod rpcmethod_beginRound_;
    const ::grpc::RpcMethod rpcmethod_success_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getLastVote(::grpc::ServerContext* context, const ::libpaxos::NextRound* request, ::libpaxos::LastVote* response);
    virtual ::grpc::Status beginRound(::grpc::ServerContext* context, const ::libpaxos::BeginRound* request, ::libpaxos::Voted* response);
    virtual ::grpc::Status success(::grpc::ServerContext* context, const ::libpaxos::Value* request, ::libpaxos::Ok* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getLastVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getLastVote() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getLastVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLastVote(::grpc::ServerContext* context, const ::libpaxos::NextRound* request, ::libpaxos::LastVote* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetLastVote(::grpc::ServerContext* context, ::libpaxos::NextRound* request, ::grpc::ServerAsyncResponseWriter< ::libpaxos::LastVote>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_beginRound : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_beginRound() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_beginRound() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginRound(::grpc::ServerContext* context, const ::libpaxos::BeginRound* request, ::libpaxos::Voted* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbeginRound(::grpc::ServerContext* context, ::libpaxos::BeginRound* request, ::grpc::ServerAsyncResponseWriter< ::libpaxos::Voted>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_success : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_success() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_success() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status success(::grpc::ServerContext* context, const ::libpaxos::Value* request, ::libpaxos::Ok* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsuccess(::grpc::ServerContext* context, ::libpaxos::Value* request, ::grpc::ServerAsyncResponseWriter< ::libpaxos::Ok>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getLastVote<WithAsyncMethod_beginRound<WithAsyncMethod_success<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_getLastVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getLastVote() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getLastVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLastVote(::grpc::ServerContext* context, const ::libpaxos::NextRound* request, ::libpaxos::LastVote* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_beginRound : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_beginRound() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_beginRound() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status beginRound(::grpc::ServerContext* context, const ::libpaxos::BeginRound* request, ::libpaxos::Voted* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_success : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_success() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_success() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status success(::grpc::ServerContext* context, const ::libpaxos::Value* request, ::libpaxos::Ok* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getLastVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getLastVote() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::libpaxos::NextRound, ::libpaxos::LastVote>(std::bind(&WithStreamedUnaryMethod_getLastVote<BaseClass>::StreamedgetLastVote, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getLastVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getLastVote(::grpc::ServerContext* context, const ::libpaxos::NextRound* request, ::libpaxos::LastVote* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetLastVote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::libpaxos::NextRound,::libpaxos::LastVote>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_beginRound : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_beginRound() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::libpaxos::BeginRound, ::libpaxos::Voted>(std::bind(&WithStreamedUnaryMethod_beginRound<BaseClass>::StreamedbeginRound, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_beginRound() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status beginRound(::grpc::ServerContext* context, const ::libpaxos::BeginRound* request, ::libpaxos::Voted* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedbeginRound(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::libpaxos::BeginRound,::libpaxos::Voted>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_success : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_success() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::libpaxos::Value, ::libpaxos::Ok>(std::bind(&WithStreamedUnaryMethod_success<BaseClass>::Streamedsuccess, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_success() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status success(::grpc::ServerContext* context, const ::libpaxos::Value* request, ::libpaxos::Ok* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsuccess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::libpaxos::Value,::libpaxos::Ok>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getLastVote<WithStreamedUnaryMethod_beginRound<WithStreamedUnaryMethod_success<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getLastVote<WithStreamedUnaryMethod_beginRound<WithStreamedUnaryMethod_success<Service > > > StreamedService;
};

}  // namespace libpaxos


#endif  // GRPC_paxos_2eproto__INCLUDED
